import dependencies.AnnotationProcessing
import dependencies.InstrumentationTest
import dependencies.JetBrains
import dependencies.Square
import dependencies.UnitTest
import dependencies.Versions
import dependencies.AndroidX
import dependencies.Google
import dependencies.Java

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'de.mannodermaus.android-junit5'
}

android {
    compileSdkVersion Versions.compileSdk

    defaultConfig {
        applicationId Versions.applicationId
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode Versions.versionCode
        versionName Versions.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner InstrumentationTest.instrumentation_runner
    }
    buildTypes {
        release {
            buildConfigField("String", "API_KEY", "\"${findProperty("openweather.apiKey")}\"")
            buildConfigField("String", "BASE_URL", "\"https://api.openweathermap.org/data/2.5/\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField("String", "API_KEY", "\"${findProperty("openweather.apiKey")}\"")
            buildConfigField("String", "BASE_URL", "\"https://api.openweathermap.org/data/2.5/\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = Java.java_version
        useIR = true
    }
    composeOptions {
        def kotlin_compiler_version = Versions.kotlin
        kotlinCompilerVersion kotlin_compiler_version

        def kotlin_compiler_extension_version = Versions.kotlin_compiler_extension
        kotlinCompilerExtensionVersion kotlin_compiler_extension_version
    }
    buildFeatures {
        compose true
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging {
            exceptionFormat "full"
            events "started", "skipped", "passed", "failed"
            showStandardStreams true
        }
    }

    configurations.all {
        resolutionStrategy {
            force("com.google.code.findbugs:jsr305:3.0.0")
            force("org.antlr:antlr4-runtime:4.7.1")
            force("org.antlr:antlr4-tool:4.7.1")
        }
    }

    packagingOptions {
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }

}

dependencies {

    implementation AndroidX.core_ktx
    implementation AndroidX.app_compat
    implementation AndroidX.constraint_layout
    implementation AndroidX.ui_tooling
    implementation AndroidX.compose_ui
    implementation AndroidX.compose_foundation
    implementation AndroidX.compose_material
    implementation AndroidX.compose_icons_core
    implementation AndroidX.compose_icons_extended
    implementation AndroidX.navigation_compose
    implementation AndroidX.navigation_hilt
    implementation AndroidX.room_runtime
    implementation AndroidX.room_ktx
    implementation AndroidX.datastore
    implementation AndroidX.hilt_lifecycle_viewmodel
    implementation AndroidX.activity_compose
    implementation AndroidX.lifecycle_viewmodel_compose

    implementation Google.acccompanist_system_ui
    implementation Google.accompanist_permission
    implementation Google.material
    implementation Google.hilt_android
    implementation Google.gms_service

    implementation JetBrains.kotlin_stdlib

    implementation Square.retrofit
    implementation Square.retrofit_gson
    implementation Square.okHttp
    implementation Square.http_logging
    implementation Square.leak_canary

    kapt AnnotationProcessing.hilt_compiler
    kapt AnnotationProcessing.room_compiler

    // TESTING
    testImplementation UnitTest.jupiter_api
    testImplementation UnitTest.jupiter_params
    testRuntimeOnly UnitTest.jupiter_engine

    // Mock web server
    testImplementation UnitTest.mock_web_server
    testImplementation UnitTest.okHttp

    // compose testing
    implementation InstrumentationTest.compose_ui

}